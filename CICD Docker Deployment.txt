Jenkins-Docker Project Flow:

Agenda: CI/CD Pipeline to Build and Deploy Docker Images in Docker Container

Objectives:

1. Install Jenkins, Docker in CI/CD Server.
2. Install Docker in Deployment Server.
3. Create Jenkins Pipeline Job to build and deploy docker images in Docker(Deployment) Server.

Steps:

1. Create EC2 Instances, Jenkins Server and Deployment Server (Enable ports 8080 in both servers)
2. Install Java, Jenkins, Docker in Jenkins Server
3. sudo usermod -aG docker jenkins (Add Jenkins user to docker group)
4. sudo systemctl restart jenkins (Restart the Jenkins)
5. Install Docker in Deployment Server
6. sudo usermod -aG docker ubuntu/ec2-user (Add ubuntu/ec2-user to docker group)
7. exit (exit and re-login the server)
8. Login to Jenkins Dashboard
9. Configure Maven: Go to Global Tool Configuration:
	- Add maven: Enter name as 'mymaven'
10. Create a Jenkins Pipeline Job
11. Write the Pipeline script (Declarative pipeline):

pipeline{
	agent any
	tools{
		maven 'mymaven'
	}
	stages{
		stage("Clone Code"){
			steps{
				git "<Github repo>"				
			}
		}
		stage("Build Code"){
			steps{
				sh 'mvn clean install'				
			}
		}
		stage("Build Docker Image"){
			steps{
				sh 'cp /var/lib/jenkins/workspace/CI_CDPipeline/target/java-web-app.war .'
				sh 'docker build -t image:$BUILDNUMBER .'	// Docker File should be present in the current directory of the project(in Github Repo)			
			}
		}
/* 
	Go to Snippet Generator, select 'with credentials':
	Add Bindings---> Secret text---> Add Credentials:
	Enter Docker Password in Secret, Enter ID and Description---> Add
	Enter Variable "DockerHubPwd" (can be anything)
*/ 
		stage("Login Docker and Push Docker Image"){
			steps{
				withCredentials(){
					sh 'docker login -u <usr_name> -p ${DockerHubPwd}'
				}
				sh 'docker push image:$BUILDNUMBER'			
			}
		}
/*
	Download and Install SSH Agent plugin
	Go to Snippet Generator, select 'SSH Agent':
	Select 'SSH Username and private key'
	Add Jenkins:
	Enter ID, username, private key
*/
		stage("Deploy Application"){
			steps{
				sshagent(){
					sh 'ssh -o StrictHostKeyChecking=no ec2-user@<private_ip of Deployment Server> docker rm -f <Cont_name> || true'
					sh 'ssh -o StrictHostKeyChecking=no ec2-user@<private_ip of Deployment Server> docker run -d -p 8080:8080 --name <Cont_name> image:$BUILDNUMBER'
				}			
			}
		}
	}
}

12. You can access the application: <Public_Ip of Deployment Server>:8080 
